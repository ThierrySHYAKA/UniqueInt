import os

class UniqueInt:
    def __init__(self):
        # Array to track integers from -1023 to 1023
        self.int_seen = [False] * 2047

    def process_file(self, input_file_path, output_file_path):
        unique_integers = []

        # Read the input file and split by newlines
        with open(input_file_path, 'r') as f:
            lines = f.readlines()

        for line in lines:
            cleaned_line = line.strip()
            if not cleaned_line:  # Skip empty or whitespace-only lines
                continue

            num = self.parse_integer(cleaned_line)
            if num is not None and not self.int_seen[num + 1023]:
                # Mark integer as seen and add to the list
                self.int_seen[num + 1023] = True
                unique_integers.append(num)

        # Sort the unique integers in ascending order
        self.bubble_sort(unique_integers)

        # Write result to output file
        self.write_to_file(unique_integers, output_file_path)

    def parse_integer(self, line):
        try:
            num = int(line)
            if -1023 <= num <= 1023:
                return num
        except ValueError:
            return None  # Skip the line if not a valid integer

    def bubble_sort(self, arr):
        n = len(arr)
        for i in range(n):
            for j in range(n - 1):
                if arr[j] > arr[j + 1]:
                    arr[j], arr[j + 1] = arr[j + 1], arr[j]

    def write_to_file(self, integers, output_file_path):
        with open(output_file_path, 'w') as f:
            for integer in integers:
                f.write(f"{integer}\n")
        print(f"Output written to {output_file_path}")


def create_output_file_path(input_file_path):
    # Extract file name without extension and append "_results.txt"
    dir_path = os.path.dirname(input_file_path)
    file_name = os.path.splitext(os.path.basename(input_file_path))[0]
    return os.path.join(dir_path, '../sample_results', f"{file_name}_results.txt")


if __name__ == "__main__":
    import sys

    # Check if input file is provided as an argument
    if len(sys.argv) < 2:
        print("Usage: python UniqueInt.py <inputFilePath>")
        sys.exit(1)

    input_file_path = os.path.abspath(sys.argv[1])
    output_file_path = create_output_file_path(input_file_path)

    # Create the output folder if it doesn't exist
    output_dir = os.path.dirname(output_file_path)
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    unique_int_processor = UniqueInt()
    unique_int_processor.process_file(input_file_path, output_file_path)
